#include <Wire.h>
#include <LSM303.h>
#include <MsTimer2.h>

#define ENL 7        // 모터 핀 정의
#define IN1 11
#define IN2 10
#define IN3 9
#define IN4 8
#define ENR 6

// 왼쪽 엔코더 핀
#define ENCODER_A_C1_PIN 50  // 왼쪽 엔코더 C1 핀
#define ENCODER_A_C2_PIN 51  // 왼쪽 엔코더 C2 핀

// 오른쪽 엔코더 핀
#define ENCODER_B_C1_PIN 52  // 오른쪽 엔코더 C1 핀
#define ENCODER_B_C2_PIN 53  // 오른쪽 엔코더 C2 핀

LSM303 compass;

float target_heading_angle = 90;        // 목표 회전 각도
float kp_yaw = 1.5;                    // PID 제어 파라미터
float kd_yaw = 0.5;
float error_yaw = 0.0;
float error_yaw_old = 0.0;
float pid_out;
float target_yaw;
int mission_flag;
volatile int function_flag = -1;  // ISR에서 사용하는 플래그

int base_speed = 100;  // 기본 모터 속도
double robot_distance = 0.0;            // 전체 로봇 주행 거리
long encoder_A_pulse = 0;                  // 왼쪽 엔코더 펄스 값
long encoder_B_pulse = 0;                  // 오른쪽 엔코더 펄스 값
long prev_encoder_A = 0;                // 이전 왼쪽 엔코더 값
long prev_encoder_B = 0;                // 이전 오른쪽 엔코더 값

int current_encoder_A = 0;
int current_encoder_B = 0;
const double meter_per_pulse = 0.0003498;  // 펄스당 이동 거리

void update_encoder_values() {
    current_encoder_A = digitalRead(ENCODER_A_C1_PIN);  // C1 핀 값 읽기
    current_encoder_B = digitalRead(ENCODER_B_C1_PIN);  // C2 핀 값 읽기
}

void reset_encoder(void) {
    encoder_A_pulse = 0;                  // 왼쪽 엔코더 값 초기화
    encoder_B_pulse = 0;                  // 오른쪽 엔코더 값 초기화
    prev_encoder_A = 0;
    prev_encoder_B = 0;
}

double update_distance(void) {
    long delta_A = current_encoder_A - prev_encoder_A; // 왼쪽 엔코더 변화량 계산
    long delta_B = current_encoder_B - prev_encoder_B; // 오른쪽 엔코더 변화량 계산

    double distance = ((delta_A + delta_B) * meter_per_pulse) / 2.0; // 평균 이동 거리 계산
    robot_distance += distance;                // 누적 주행 거리 반영

    prev_encoder_A = current_encoder_A;
    prev_encoder_B = current_encoder_B;

    return distance;                           // 현재 이동 거리 반환
}

void motor_l(int speed) {
    if (speed >= 0) {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        analogWrite(ENL, speed);
    } else {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW );
        analogWrite(ENL, -speed);
    }
}

void motor_r(int speed) {
    if (speed >= 0) {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
        analogWrite(ENR, speed);
    } else {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
        analogWrite(ENR, -speed);
    }
}

void motor_control(int left_motor_speed, int right_motor_speed) {
    motor_l(left_motor_speed);
    motor_r(right_motor_speed);
}

void yaw_control(void) {
    float error_yaw_d;
    int l_motor_speed;
    int r_motor_speed;

    compass.read();
    float heading_angle = compass.heading();

    error_yaw = target_yaw - heading_angle;
    error_yaw_d = error_yaw - error_yaw_old;
    pid_out = kp_yaw * error_yaw + kd_yaw * error_yaw_d;
    error_yaw_old = error_yaw;

    l_motor_speed = base_speed + (int)pid_out;
    r_motor_speed = base_speed - (int)pid_out;

    motor_control(l_motor_speed, r_motor_speed);
}

void read_line_center() {
    // 라인 센서 값을 읽어오는 코드 작성
}

void setup() {
    pinMode(ENL, OUTPUT);
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(IN3, OUTPUT);
    pinMode(IN4, OUTPUT);
    pinMode(ENR, OUTPUT);

    Serial.begin(115200);

    Wire.begin();
    compass.init();
    compass.enableDefault();

    mission_flag = 0;
    reset_encoder();
    robot_distance = 0.0;

    MsTimer2::set(30, MsTimer2_ISR);
    MsTimer2::start();
}

void MsTimer2_ISR() {
    read_line_center();

    switch (function_flag) {
        case 1:  // line 제어
            break;
        case 2:  // yaw 제어
            yaw_control();
            break;
        case 3:  // 정지
        default:
            motor_control(0, 0);
            break;
    }
}

void loop() {
    switch (mission_flag) {
        case 0:  // 초기화 및 시작
            motor_control(0, 0);
            delay(500);
            reset_encoder();
            robot_distance = 0.0;
            function_flag = 1;
            mission_flag = 1;
            break;

        case 1:  // 1미터 이동 후 첫 번째 90도 회전
            if (robot_distance >= 1.0) {
                function_flag = 3;
                delay(500);
                target_yaw = 90 + compass.heading();
                function_flag = 2;
                mission_flag = 2;
            }
            break;

        case 2:  // 첫 번째 90도 회전 완료 후 1미터 추가 이동 준비
            if (error_yaw < 3 && error_yaw > -3) {
                function_flag = 3;
                delay(500);
                reset_encoder();
                robot_distance = 0.0;
                mission_flag = 3;
            }
            break;

        case 3:  // 두 번째 1미터 직진
            if (robot_distance >= 1.0) {
                function_flag = 3;
                delay(500);
                target_yaw = 90 + compass.heading();  // 두 번째 90도 회전 준비
                function_flag = 2;
                mission_flag = 4;
            }
            break;

        case 4:  // 두 번째 90도 회전 완료 확인
            if (error_yaw < 3 && error_yaw > -3) {
                function_flag = 3;
                motor_control(0, 0);  // 최종 정지
                mission_flag = 5;     // 종료 상태
            }
            break;

        case 5:
            // 대기 상태 또는 추가 미션
            break;
    }
}
